import cn.fay.mybatis.dao.TestMapper;
import com.alibaba.dubbo.config.ServiceConfig;
import org.apache.commons.io.IOUtils;
import org.apache.ibatis.reflection.ParamNameUtil;
import org.objectweb.asm.*;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
import org.springframework.util.PropertyPlaceholderHelper;
import sun.reflect.Reflection;

import java.io.*;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.sql.*;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * Created by fay on 2018/1/11.
 */
public class Test {
    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException {
//        testTry();
        InterfaceDefault interfaceDefault = new InterfaceDefault() {
            @Override
            public void nonDefault(String name, Date date, Object obj, int id) {
//                System.out.println("abc");
                int a = 1;
            }
        };

        Method method = null;
        for (Method method1 : InterfaceDefault.class.getMethods()) {
            if (method1.getName().equals("nonDefault")) {
                method = method1;
            }
        }
        long start = System.currentTimeMillis();
        for (int i = 0; i < 10000000; i++)
            method.invoke(interfaceDefault, null, null, null, 0);
        System.out.println(System.currentTimeMillis() - start);
        start = System.currentTimeMillis();
        for (int i = 0; i < 10000000; i++)
            interfaceDefault.nonDefault(null, null, null, 0);
        System.out.println(System.currentTimeMillis() - start);
    }


    private static String repair(String s) {
        if (s.length() != Integer.SIZE) {
            int temp = Integer.SIZE - s.length();
            for (int i = 0; i < temp; i++) {
                s = "0" + s;
            }
        }
        return s;
    }

    @org.junit.Test
    public static void testTry() {
        System.out.println(Reflection.getCallerClass());
        System.out.println(Thread.currentThread().getStackTrace()[2].getMethodName());
    }

    @org.junit.Test
    public void testtt() throws SQLException {
        Connection connection = DriverManager.getConnection("jdbc:mysql://rm-wz957s9v4cf3a2422o.mysql.rds.aliyuncs.com:3306/test", "root", "Ladyship77");
        PreparedStatement statement = connection.prepareStatement("select id ID, name NAME, value from test where id = ?");
        statement.setString(1, "54324");
        ResultSet resultSet = statement.executeQuery();
        ResultSetMetaData metaData = resultSet.getMetaData();
        int count = metaData.getColumnCount();
        for (int i = 1; i <= count; i++) {
            System.out.println("column:" + metaData.getColumnName(i) + ", label:" + metaData.getColumnLabel(i));
        }
    }

    @org.junit.Test
    public void test2() throws NoSuchMethodException, IOException {
        ClassReader classReader = new ClassReader(ClassLoader.getSystemResourceAsStream(InterfaceDefault.class.getName().replaceAll("\\.", "/") + ".class"));
        classReader.accept(new ClassVisitor() {
            @Override
            public void visit(int i, int i1, String s, String s1, String s2, String[] strings) {
                System.out.println(i + "," + i1 + "," + s + "," + s1 + "," + s2 + "," + Arrays.toString(strings));
            }

            @Override
            public void visitSource(String s, String s1) {

            }

            @Override
            public void visitOuterClass(String s, String s1, String s2) {

            }

            @Override
            public AnnotationVisitor visitAnnotation(String s, boolean b) {
                return null;
            }

            @Override
            public void visitAttribute(Attribute attribute) {

            }

            @Override
            public void visitInnerClass(String s, String s1, String s2, int i) {

            }

            @Override
            public FieldVisitor visitField(int i, String s, String s1, String s2, Object o) {
                return null;
            }

            @Override
            public MethodVisitor visitMethod(int i, String s, String s1, String s2, String[] strings) {
                System.out.println("method:" + i + "," + s + "," + s1 + "," + s2 + "," + Arrays.toString(strings));
                return new MethodVisitor() {
                    @Override
                    public AnnotationVisitor visitAnnotationDefault() {
                        return null;
                    }

                    @Override
                    public AnnotationVisitor visitAnnotation(String s, boolean b) {
                        return null;
                    }

                    @Override
                    public AnnotationVisitor visitParameterAnnotation(int i, String s, boolean b) {
                        return null;
                    }

                    @Override
                    public void visitAttribute(Attribute attribute) {

                    }

                    @Override
                    public void visitCode() {

                    }

                    @Override
                    public void visitFrame(int i, int i1, Object[] objects, int i2, Object[] objects1) {

                    }

                    @Override
                    public void visitInsn(int i) {

                    }

                    @Override
                    public void visitIntInsn(int i, int i1) {

                    }

                    @Override
                    public void visitVarInsn(int i, int i1) {

                    }

                    @Override
                    public void visitTypeInsn(int i, String s) {

                    }

                    @Override
                    public void visitFieldInsn(int i, String s, String s1, String s2) {

                    }

                    @Override
                    public void visitMethodInsn(int i, String s, String s1, String s2) {

                    }

                    @Override
                    public void visitJumpInsn(int i, Label label) {

                    }

                    @Override
                    public void visitLabel(Label label) {

                    }

                    @Override
                    public void visitLdcInsn(Object o) {

                    }

                    @Override
                    public void visitIincInsn(int i, int i1) {

                    }

                    @Override
                    public void visitTableSwitchInsn(int i, int i1, Label label, Label[] labels) {

                    }

                    @Override
                    public void visitLookupSwitchInsn(Label label, int[] ints, Label[] labels) {

                    }

                    @Override
                    public void visitMultiANewArrayInsn(String s, int i) {

                    }

                    @Override
                    public void visitTryCatchBlock(Label label, Label label1, Label label2, String s) {

                    }

                    @Override
                    public void visitLocalVariable(String s, String s1, String s2, Label label, Label label1, int i) {
                        System.out.println(s + "," + s1 + "," + s2 + "," + label + "," + label1 + "," + i);
                    }

                    @Override
                    public void visitLineNumber(int i, Label label) {

                    }

                    @Override
                    public void visitMaxs(int i, int i1) {

                    }

                    @Override
                    public void visitEnd() {
                        System.out.println("method end");
                    }
                };
            }

            @Override
            public void visitEnd() {
                System.out.println("class end");
            }
        }, 0);
        System.out.println(classReader);
//        Method[] methods = MethodParamTest.class.getDeclaredMethods();
//        for (Method method : methods) {
//            System.out.println(method.getName() + ":" + Arrays.toString(new LocalVariableTableParameterNameDiscoverer().getParameterNames(method)));
//        }
    }


    @org.junit.Test
    public void test44() throws IOException {
        String s = "-54, -2, -70, -66, 0, 0, 0, 46, 0, -24, 1, 0, 57, 99, 110, 47, 102, 97, 121, 47, 112, 97, 116, 116, 101, 114, 110, 47, 112, 114, 111, 120, 121, 47, 72, 101, 108, 108, 111, 73, 109, 112, 108, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 67, 71, 76, 73, 66, 36, 36, 97, 50, 51, 49, 48, 99, 102, 49, 7, 0, 1, 1, 0, 30, 99, 110, 47, 102, 97, 121, 47, 112, 97, 116, 116, 101, 114, 110, 47, 112, 114, 111, 120, 121, 47, 72, 101, 108, 108, 111, 73, 109, 112, 108, 7, 0, 3, 1, 0, 26, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 70, 97, 99, 116, 111, 114, 121, 7, 0, 5, 1, 0, 11, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 1, 0, 11, 67, 71, 76, 73, 66, 36, 66, 79, 85, 78, 68, 1, 0, 1, 90, 1, 0, 22, 67, 71, 76, 73, 66, 36, 84, 72, 82, 69, 65, 68, 95, 67, 65, 76, 76, 66, 65, 67, 75, 83, 1, 0, 23, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 101, 97, 100, 76, 111, 99, 97, 108, 59, 1, 0, 22, 67, 71, 76, 73, 66, 36, 83, 84, 65, 84, 73, 67, 95, 67, 65, 76, 76, 66, 65, 67, 75, 83, 1, 0, 30, 91, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 1, 0, 16, 67, 71, 76, 73, 66, 36, 67, 65, 76, 76, 66, 65, 67, 75, 95, 48, 1, 0, 38, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 59, 1, 0, 17, 67, 71, 76, 73, 66, 36, 83, 84, 65, 84, 73, 67, 72, 79, 79, 75, 49, 1, 0, 3, 40, 41, 86, 1, 0, 21, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 101, 97, 100, 76, 111, 99, 97, 108, 7, 0, 18, 1, 0, 6, 60, 105, 110, 105, 116, 62, 12, 0, 20, 0, 17, 10, 0, 19, 0, 21, 12, 0, 10, 0, 11, 9, 0, 2, 0, 23, 1, 0, 20, 67, 71, 76, 73, 66, 36, 104, 101, 108, 108, 111, 36, 48, 36, 77, 101, 116, 104, 111, 100, 1, 0, 26, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 1, 0, 19, 67, 71, 76, 73, 66, 36, 104, 101, 108, 108, 111, 36, 48, 36, 80, 114, 111, 120, 121, 1, 0, 32, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 59, 1, 0, 15, 67, 71, 76, 73, 66, 36, 101, 109, 112, 116, 121, 65, 114, 103, 115, 1, 0, 19, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 13, 67, 71, 76, 73, 66, 36, 104, 101, 108, 108, 111, 36, 48, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 5, 104, 101, 108, 108, 111, 12, 0, 33, 0, 32, 10, 0, 4, 0, 34, 12, 0, 14, 0, 15, 9, 0, 2, 0, 36, 1, 0, 20, 67, 71, 76, 73, 66, 36, 66, 73, 78, 68, 95, 67, 65, 76, 76, 66, 65, 67, 75, 83, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 86, 12, 0, 38, 0, 39, 10, 0, 2, 0, 40, 12, 0, 25, 0, 26, 9, 0, 2, 0, 42, 12, 0, 29, 0, 30, 9, 0, 2, 0, 44, 12, 0, 27, 0, 28, 9, 0, 2, 0, 46, 1, 0, 36, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 7, 0, 48, 1, 0, 9, 105, 110, 116, 101, 114, 99, 101, 112, 116, 1, 0, 115, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 12, 0, 50, 0, 51, 11, 0, 49, 0, 52, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 7, 0, 54, 1, 0, 23, 67, 71, 76, 73, 66, 36, 102, 105, 110, 97, 108, 105, 122, 101, 36, 49, 36, 77, 101, 116, 104, 111, 100, 1, 0, 22, 67, 71, 76, 73, 66, 36, 102, 105, 110, 97, 108, 105, 122, 101, 36, 49, 36, 80, 114, 111, 120, 121, 1, 0, 16, 67, 71, 76, 73, 66, 36, 102, 105, 110, 97, 108, 105, 122, 101, 36, 49, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 7, 0, 59, 1, 0, 8, 102, 105, 110, 97, 108, 105, 122, 101, 12, 0, 61, 0, 17, 10, 0, 4, 0, 62, 12, 0, 56, 0, 26, 9, 0, 2, 0, 64, 12, 0, 57, 0, 28, 9, 0, 2, 0, 66, 1, 0, 21, 67, 71, 76, 73, 66, 36, 101, 113, 117, 97, 108, 115, 36, 50, 36, 77, 101, 116, 104, 111, 100, 1, 0, 20, 67, 71, 76, 73, 66, 36, 101, 113, 117, 97, 108, 115, 36, 50, 36, 80, 114, 111, 120, 121, 1, 0, 14, 67, 71, 76, 73, 66, 36, 101, 113, 117, 97, 108, 115, 36, 50, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 1, 0, 6, 101, 113, 117, 97, 108, 115, 12, 0, 72, 0, 71, 10, 0, 4, 0, 73, 12, 0, 68, 0, 26, 9, 0, 2, 0, 75, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 7, 0, 77, 12, 0, 69, 0, 28, 9, 0, 2, 0, 79, 1, 0, 17, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 66, 111, 111, 108, 101, 97, 110, 7, 0, 81, 1, 0, 12, 98, 111, 111, 108, 101, 97, 110, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 90, 12, 0, 83, 0, 84, 10, 0, 82, 0, 85, 1, 0, 23, 67, 71, 76, 73, 66, 36, 116, 111, 83, 116, 114, 105, 110, 103, 36, 51, 36, 77, 101, 116, 104, 111, 100, 1, 0, 22, 67, 71, 76, 73, 66, 36, 116, 111, 83, 116, 114, 105, 110, 103, 36, 51, 36, 80, 114, 111, 120, 121, 1, 0, 16, 67, 71, 76, 73, 66, 36, 116, 111, 83, 116, 114, 105, 110, 103, 36, 51, 1, 0, 8, 116, 111, 83, 116, 114, 105, 110, 103, 12, 0, 90, 0, 32, 10, 0, 4, 0, 91, 12, 0, 87, 0, 26, 9, 0, 2, 0, 93, 12, 0, 88, 0, 28, 9, 0, 2, 0, 95, 1, 0, 23, 67, 71, 76, 73, 66, 36, 104, 97, 115, 104, 67, 111, 100, 101, 36, 52, 36, 77, 101, 116, 104, 111, 100, 1, 0, 22, 67, 71, 76, 73, 66, 36, 104, 97, 115, 104, 67, 111, 100, 101, 36, 52, 36, 80, 114, 111, 120, 121, 1, 0, 16, 67, 71, 76, 73, 66, 36, 104, 97, 115, 104, 67, 111, 100, 101, 36, 52, 1, 0, 3, 40, 41, 73, 1, 0, 8, 104, 97, 115, 104, 67, 111, 100, 101, 12, 0, 101, 0, 100, 10, 0, 4, 0, 102, 12, 0, 97, 0, 26, 9, 0, 2, 0, 104, 12, 0, 98, 0, 28, 9, 0, 2, 0, 106, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 78, 117, 109, 98, 101, 114, 7, 0, 108, 1, 0, 8, 105, 110, 116, 86, 97, 108, 117, 101, 12, 0, 110, 0, 100, 10, 0, 109, 0, 111, 1, 0, 20, 67, 71, 76, 73, 66, 36, 99, 108, 111, 110, 101, 36, 53, 36, 77, 101, 116, 104, 111, 100, 1, 0, 19, 67, 71, 76, 73, 66, 36, 99, 108, 111, 110, 101, 36, 53, 36, 80, 114, 111, 120, 121, 1, 0, 13, 67, 71, 76, 73, 66, 36, 99, 108, 111, 110, 101, 36, 53, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 36, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 111, 110, 101, 78, 111, 116, 83, 117, 112, 112, 111, 114, 116, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 117, 1, 0, 5, 99, 108, 111, 110, 101, 12, 0, 119, 0, 116, 10, 0, 4, 0, 120, 12, 0, 113, 0, 26, 9, 0, 2, 0, 122, 12, 0, 114, 0, 28, 9, 0, 2, 0, 124, 1, 0, 21, 67, 71, 76, 73, 66, 36, 102, 105, 110, 100, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 1, 0, 63, 40, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 99, 111, 114, 101, 47, 83, 105, 103, 110, 97, 116, 117, 114, 101, 59, 41, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 59, 10, 0, 78, 0, 91, 10, 0, 78, 0, 102, 1, 0, 11, 102, 105, 110, 97, 108, 105, 122, 101, 40, 41, 86, 8, 0, -126, 10, 0, 78, 0, 73, 1, 0, 25, 99, 108, 111, 110, 101, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 8, 0, -123, 1, 0, 25, 104, 101, 108, 108, 111, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 8, 0, -121, 1, 0, 27, 101, 113, 117, 97, 108, 115, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 8, 0, -119, 1, 0, 28, 116, 111, 83, 116, 114, 105, 110, 103, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 8, 0, -117, 1, 0, 11, 104, 97, 115, 104, 67, 111, 100, 101, 40, 41, 73, 8, 0, -115, 1, 0, 57, 99, 110, 46, 102, 97, 121, 46, 112, 97, 116, 116, 101, 114, 110, 46, 112, 114, 111, 120, 121, 46, 72, 101, 108, 108, 111, 73, 109, 112, 108, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 67, 71, 76, 73, 66, 36, 36, 97, 50, 51, 49, 48, 99, 102, 49, 8, 0, -113, 1, 0, 15, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 7, 0, -111, 1, 0, 7, 102, 111, 114, 78, 97, 109, 101, 1, 0, 37, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 12, 0, -109, 0, -108, 10, 0, -110, 0, -107, 8, 0, 61, 8, 0, 17, 8, 0, 72, 8, 0, 71, 8, 0, 90, 8, 0, 32, 8, 0, 101, 8, 0, 100, 8, 0, 119, 8, 0, 116, 1, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 8, 0, -95, 1, 0, 18, 103, 101, 116, 68, 101, 99, 108, 97, 114, 101, 100, 77, 101, 116, 104, 111, 100, 115, 1, 0, 29, 40, 41, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 12, 0, -93, 0, -92, 10, 0, -110, 0, -91, 1, 0, 30, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 99, 111, 114, 101, 47, 82, 101, 102, 108, 101, 99, 116, 85, 116, 105, 108, 115, 7, 0, -89, 1, 0, 11, 102, 105, 110, 100, 77, 101, 116, 104, 111, 100, 115, 1, 0, 75, 40, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 41, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 12, 0, -87, 0, -86, 10, 0, -88, 0, -85, 8, 0, 58, 1, 0, 30, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 7, 0, -82, 1, 0, 6, 99, 114, 101, 97, 116, 101, 1, 0, 122, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 59, 12, 0, -80, 0, -79, 10, 0, -81, 0, -78, 8, 0, 70, 8, 0, 89, 8, 0, 99, 8, 0, 115, 8, 0, 33, 1, 0, 30, 99, 110, 46, 102, 97, 121, 46, 112, 97, 116, 116, 101, 114, 110, 46, 112, 114, 111, 120, 121, 46, 72, 101, 108, 108, 111, 73, 109, 112, 108, 8, 0, -71, 8, 0, 31, 10, 0, 4, 0, 21, 1, 0, 26, 67, 71, 76, 73, 66, 36, 83, 69, 84, 95, 84, 72, 82, 69, 65, 68, 95, 67, 65, 76, 76, 66, 65, 67, 75, 83, 1, 0, 33, 40, 91, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 41, 86, 1, 0, 3, 115, 101, 116, 12, 0, -65, 0, 39, 10, 0, 19, 0, -64, 1, 0, 26, 67, 71, 76, 73, 66, 36, 83, 69, 84, 95, 83, 84, 65, 84, 73, 67, 95, 67, 65, 76, 76, 66, 65, 67, 75, 83, 12, 0, 12, 0, 13, 9, 0, 2, 0, -61, 12, 0, 8, 0, 9, 9, 0, 2, 0, -59, 1, 0, 3, 103, 101, 116, 12, 0, -57, 0, 116, 10, 0, 19, 0, -56, 7, 0, 13, 1, 0, 11, 110, 101, 119, 73, 110, 115, 116, 97, 110, 99, 101, 1, 0, 50, 40, 91, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 12, 0, -67, 0, -66, 10, 0, 2, 0, -51, 10, 0, 2, 0, 21, 1, 0, 49, 40, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 27, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 7, 0, -47, 1, 0, 87, 40, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 91, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 34, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, -44, 1, 0, 21, 67, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 8, 0, -42, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 12, 0, 20, 0, -40, 10, 0, -43, 0, -39, 1, 0, 11, 103, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 1, 0, 32, 40, 73, 41, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 1, 0, 11, 115, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 1, 0, 33, 40, 73, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 41, 86, 1, 0, 12, 103, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 115, 1, 0, 32, 40, 41, 91, 76, 110, 101, 116, 47, 115, 102, 47, 99, 103, 108, 105, 98, 47, 112, 114, 111, 120, 121, 47, 67, 97, 108, 108, 98, 97, 99, 107, 59, 1, 0, 12, 115, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 115, 1, 0, 8, 60, 99, 108, 105, 110, 105, 116, 62, 12, 0, 16, 0, 17, 10, 0, 2, 0, -29, 1, 0, 4, 67, 111, 100, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 0, 1, 0, 2, 0, 4, 0, 1, 0, 6, 0, 17, 0, 2, 0, 8, 0, 9, 0, 0, 0, 26, 0, 10, 0, 11, 0, 0, 0, 26, 0, 12, 0, 13, 0, 0, 0, 2, 0, 14, 0, 15, 0, 0, 0, 26, 0, 25, 0, 26, 0, 0, 0, 26, 0, 27, 0, 28, 0, 0, 0, 26, 0, 29, 0, 30, 0, 0, 0, 26, 0, 56, 0, 26, 0, 0, 0, 26, 0, 57, 0, 28, 0, 0, 0, 26, 0, 68, 0, 26, 0, 0, 0, 26, 0, 69, 0, 28, 0, 0, 0, 26, 0, 87, 0, 26, 0, 0, 0, 26, 0, 88, 0, 28, 0, 0, 0, 26, 0, 97, 0, 26, 0, 0, 0, 26, 0, 98, 0, 28, 0, 0, 0, 26, 0, 113, 0, 26, 0, 0, 0, 26, 0, 114, 0, 28, 0, 0, 0, 26, 0, 8, 0, 16, 0, 17, 0, 1, 0, -27, 0, 0, 1, 2, 0, 6, 0, 2, 0, 0, 0, -10, -69, 0, 19, 89, -73, 0, 22, -77, 0, 24, 3, -67, 0, 78, -77, 0, 45, 18, -112, -72, 0, -106, 75, 16, 10, -67, 0, 55, 89, 3, 18, -105, 83, 89, 4, 18, -104, 83, 89, 5, 18, -103, 83, 89, 6, 18, -102, 83, 89, 7, 18, -101, 83, 89, 8, 18, -100, 83, 89, 16, 6, 18, -99, 83, 89, 16, 7, 18, -98, 83, 89, 16, 8, 18, -97, 83, 89, 16, 9, 18, -96, 83, 18, -94, -72, 0, -106, 89, 76, -74, 0, -90, -72, 0, -84, 89, 3, 50, -77, 0, 65, 43, 42, 18, -104, 18, -105, 18, -83, -72, 0, -77, -77, 0, 67, 89, 4, 50, -77, 0, 76, 43, 42, 18, -102, 18, -103, 18, -76, -72, 0, -77, -77, 0, 80, 89, 5, 50, -77, 0, 94, 43, 42, 18, -100, 18, -101, 18, -75, -72, 0, -77, -77, 0, 96, 89, 6, 50, -77, 0, 105, 43, 42, 18, -98, 18, -99, 18, -74, -72, 0, -77, -77, 0, 107, 89, 7, 50, -77, 0, 123, 43, 42, 18, -96, 18, -97, 18, -73, -72, 0, -77, -77, 0, 125, 87, 5, -67, 0, 55, 89, 3, 18, -72, 83, 89, 4, 18, -100, 83, 18, -70, -72, 0, -106, 89, 76, -74, 0, -90, -72, 0, -84, 89, 3, 50, -77, 0, 43, 43, 42, 18, -100, 18, -72, 18, -69, -72, 0, -77, -77, 0, 47, 87, -79, -79, 0, 0, 0, 0, 0, 16, 0, 31, 0, 32, 0, 1, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 35, -80, 0, 0, 0, 0, 0, 17, 0, 33, 0, 32, 0, 1, 0, -27, 0, 0, 0, 57, 0, 5, 0, 1, 0, 0, 0, 45, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 22, 42, -78, 0, 43, -78, 0, 45, -78, 0, 47, -71, 0, 53, 5, 0, -64, 0, 55, -80, 42, -73, 0, 35, -80, 0, 0, 0, 0, 0, 16, 0, 58, 0, 17, 0, 2, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 63, -79, 0, 0, 0, 0, 0, -26, 0, 0, 0, 4, 0, 1, 0, 60, 0, 20, 0, 61, 0, 17, 0, 2, 0, -27, 0, 0, 0, 54, 0, 5, 0, 1, 0, 0, 0, 42, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 19, 42, -78, 0, 65, -78, 0, 45, -78, 0, 67, -71, 0, 53, 5, 0, -79, 42, -73, 0, 63, -79, 0, 0, 0, 0, 0, -26, 0, 0, 0, 4, 0, 1, 0, 60, 0, 16, 0, 70, 0, 71, 0, 1, 0, -27, 0, 0, 0, 18, 0, 2, 0, 2, 0, 0, 0, 6, 42, 43, -73, 0, 74, -84, 0, 0, 0, 0, 0, 17, 0, 72, 0, 71, 0, 1, 0, -27, 0, 0, 0, 75, 0, 7, 0, 2, 0, 0, 0, 63, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 39, 42, -78, 0, 76, 4, -67, 0, 78, 89, 3, 43, 83, -78, 0, 80, -71, 0, 53, 5, 0, 89, -57, 0, 8, 87, 3, -89, 0, 9, -64, 0, 82, -74, 0, 86, -84, 42, 43, -73, 0, 74, -84, 0, 0, 0, 0, 0, 16, 0, 89, 0, 32, 0, 1, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 92, -80, 0, 0, 0, 0, 0, 17, 0, 90, 0, 32, 0, 1, 0, -27, 0, 0, 0, 57, 0, 5, 0, 1, 0, 0, 0, 45, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 22, 42, -78, 0, 94, -78, 0, 45, -78, 0, 96, -71, 0, 53, 5, 0, -64, 0, 55, -80, 42, -73, 0, 92, -80, 0, 0, 0, 0, 0, 16, 0, 99, 0, 100, 0, 1, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 103, -84, 0, 0, 0, 0, 0, 17, 0, 101, 0, 100, 0, 1, 0, -27, 0, 0, 0, 69, 0, 5, 0, 1, 0, 0, 0, 57, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 34, 42, -78, 0, 105, -78, 0, 45, -78, 0, 107, -71, 0, 53, 5, 0, 89, -57, 0, 8, 87, 3, -89, 0, 9, -64, 0, 109, -74, 0, 112, -84, 42, -73, 0, 103, -84, 0, 0, 0, 0, 0, 16, 0, 115, 0, 116, 0, 2, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 121, -80, 0, 0, 0, 0, 0, -26, 0, 0, 0, 4, 0, 1, 0, 118, 0, 20, 0, 119, 0, 116, 0, 2, 0, -27, 0, 0, 0, 54, 0, 5, 0, 1, 0, 0, 0, 42, 42, -76, 0, 37, 89, -57, 0, 12, 87, 42, -72, 0, 41, 42, -76, 0, 37, 89, -58, 0, 19, 42, -78, 0, 123, -78, 0, 45, -78, 0, 125, -71, 0, 53, 5, 0, -80, 42, -73, 0, 121, -80, 0, 0, 0, 0, 0, -26, 0, 0, 0, 4, 0, 1, 0, 118, 0, 9, 0, 126, 0, 127, 0, 1, 0, -27, 0, 0, 0, -101, 0, 2, 0, 1, 0, 0, 0, -113, 42, -74, 0, -128, 89, -74, 0, -127, -85, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 6, -94, 43, -30, -105, 0, 0, 0, 60, -31, -78, -63, 58, 0, 0, 0, 72, 23, -75, -115, -99, 0, 0, 0, 84, 108, -27, -107, -74, 0, 0, 0, 96, 114, 15, -10, 55, 0, 0, 0, 108, 118, 79, -75, 109, 0, 0, 0, 120, 18, -125, -74, 0, -124, -103, 0, 68, -78, 0, 67, -80, 18, -122, -74, 0, -124, -103, 0, 56, -78, 0, 125, -80, 18, -120, -74, 0, -124, -103, 0, 44, -78, 0, 47, -80, 18, -118, -74, 0, -124, -103, 0, 32, -78, 0, 80, -80, 18, -116, -74, 0, -124, -103, 0, 20, -78, 0, 96, -80, 18, -114, -74, 0, -124, -103, 0, 8, -78, 0, 107, -80, 87, 1, -80, 0, 0, 0, 0, 0, 1, 0, 20, 0, 17, 0, 1, 0, -27, 0, 0, 0, 21, 0, 2, 0, 1, 0, 0, 0, 9, 42, 89, -73, 0, -68, -72, 0, 41, -79, 0, 0, 0, 0, 0, 9, 0, -67, 0, -66, 0, 1, 0, -27, 0, 0, 0, 20, 0, 2, 0, 1, 0, 0, 0, 8, -78, 0, 24, 42, -74, 0, -63, -79, 0, 0, 0, 0, 0, 9, 0, -62, 0, -66, 0, 1, 0, -27, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -77, 0, -60, -79, 0, 0, 0, 0, 0, 26, 0, 38, 0, 39, 0, 1, 0, -27, 0, 0, 0, 65, 0, 3, 0, 2, 0, 0, 0, 53, 42, -64, 0, 2, 76, 43, -76, 0, -58, -102, 0, 43, 43, 4, -75, 0, -58, -78, 0, 24, -74, 0, -55, 89, -57, 0, 15, 87, -78, 0, -60, 89, -57, 0, 7, 87, -89, 0, 16, -64, 0, -54, 43, 95, 3, 50, -64, 0, 49, -75, 0, 37, -79, 0, 0, 0, 0, 0, 1, 0, -53, 0, -52, 0, 1, 0, -27, 0, 0, 0, 28, 0, 2, 0, 2, 0, 0, 0, 16, 43, -72, 0, -50, -69, 0, 2, 89, -73, 0, -49, 1, -72, 0, -50, -80, 0, 0, 0, 0, 0, 1, 0, -53, 0, -48, 0, 1, 0, -27, 0, 0, 0, 35, 0, 4, 0, 2, 0, 0, 0, 23, 4, -67, 0, -46, 89, 3, 43, 83, -72, 0, -50, -69, 0, 2, 89, -73, 0, -49, 1, -72, 0, -50, -80, 0, 0, 0, 0, 0, 1, 0, -53, 0, -45, 0, 1, 0, -27, 0, 0, 0, 66, 0, 5, 0, 4, 0, 0, 0, 54, 45, -72, 0, -50, -69, 0, 2, 89, 43, 89, -66, -86, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 87, -73, 0, -49, -89, 0, 17, -89, 0, 3, 87, -69, 0, -43, 89, 18, -41, -73, 0, -38, -65, 1, -72, 0, -50, -80, 0, 0, 0, 0, 0, 1, 0, -37, 0, -36, 0, 1, 0, -27, 0, 0, 0, 45, 0, 2, 0, 2, 0, 0, 0, 33, 42, -72, 0, 41, 42, 27, -86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, -76, 0, 37, -89, 0, 5, 87, 1, -80, 0, 0, 0, 0, 0, 1, 0, -35, 0, -34, 0, 1, 0, -27, 0, 0, 0, 44, 0, 2, 0, 3, 0, 0, 0, 32, 27, -86, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 42, 44, -64, 0, 49, -75, 0, 37, -89, 0, 3, -79, 0, 0, 0, 0, 0, 1, 0, -33, 0, -32, 0, 1, 0, -27, 0, 0, 0, 29, 0, 5, 0, 1, 0, 0, 0, 17, 42, -72, 0, 41, 42, 4, -67, 0, -46, 89, 3, 42, -76, 0, 37, 83, -80, 0, 0, 0, 0, 0, 1, 0, -31, 0, -66, 0, 1, 0, -27, 0, 0, 0, 24, 0, 5, 0, 2, 0, 0, 0, 12, 42, 43, 92, 3, 50, -64, 0, 49, -75, 0, 37, -79, 0, 0, 0, 0, 0, 8, 0, -30, 0, 17, 0, 1, 0, -27, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 4, -72, 0, -28, -79, 0, 0, 0, 0, 0, 1, 0, -25, 0, 0, 0, 2, 0, 7";
        String[] arr = s.split(",");
        byte[] bytes = new byte[arr.length];
        for (int i = 0; i < arr.length; i++) {
            bytes[i] = Byte.valueOf(arr[i].trim());
        }
        FileOutputStream out = new FileOutputStream("/data/tmp.class");
        out.write(bytes);
        out.close();
    }

}

class Person {
    public Integer id;
    private String name;
    private int weight;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getWeight() {
        return weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    public Person(Integer id, String name, int weight) {
        this.id = id;
        this.name = name;
        this.weight = weight;
    }
    //省略所有set、get方法

    public String toString() {
        return "id:" + id + ",name:" + name + ",weight:" + weight;
    }

}
